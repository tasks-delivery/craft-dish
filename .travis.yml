# sudo: false --> run dist image in docker container on shared host for faster startup (runs slower)
# sudo: required --> run dist image in VM on Google Compute Engine for slower startup (runs faster)
sudo: required
dist: trusty
os:
  - linux
  - osx

env:
  - SYS=25 ABI="google_apis;arm64-v8a"
  - SYS=25 ABI="google_apis;armeabi-v7a"
  - SYS=24 ABI="google_apis;arm64-v8a"
  - SYS=24 ABI="google_apis;armeabi-v7a"
  - SYS=23 ABI="google_apis;armeabi-v7a"

  - SYS=22 ABI="default;x86" # demo failure due to no accelerator on travis
  - SYS=22 ABI="default;x86_64" # demo failure due to no accelerator on travis
  - SYS=22 ABI="google_apis;armeabi-v7a"
  - SYS=22 ABI="google_apis;x86" # demo failure due to no accelerator on travis
  - SYS=22 ABI="google_apis;x86_64" # demo failure due to no accelerator on travis
  - SYS=22 ABI="default;armeabi-v7a"

  - SYS=21 ABI="default;armeabi-v7a"
  - SYS=20 ABI="default;armeabi-v7a"
  - SYS=19 ABI="default;armeabi-v7a"
  - SYS=18 ABI="default;armeabi-v7a"
  - SYS=17 ABI="default;armeabi-v7a"
  - SYS=16 ABI="default;armeabi-v7a"
  - SYS=15 ABI="default;armeabi-v7a"
  - SYS=14 ABI="default;armeabi-v7a"
  - SYS=10 ABI="default;armeabi-v7a"

matrix:
  allow_failures:
    - env: SYS=22 ABI="default;x86"
    - env: SYS=22 ABI="default;x86_64"
    - env: SYS=22 ABI="google_apis;x86"
    - env: SYS=22 ABI="google_apis;x86_64"
    - env: SYS=20 ABI="default;armeabi-v7a"
    - env: SYS=14 ABI="default;armeabi-v7a"

language: generic
before_install:
  - cd craft-dish-automation
  - ls
  - mvn -N io.takari:maven:wrapper
  - ./mvnw install -DskipTests=true -Dmaven.javadoc.skip=true -B -V
  - sudo apt-get update
  - sudo apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev
    libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev
  # Install the Android SDK Dependency.
  - export ANDROID_HOME=~/android-sdk-linux
  - if [ $TRAVIS_OS_NAME == "osx" ]; then wget -q "https://dl.google.com/android/repository/sdk-tools-darwin-4333796.zip" -O android-sdk-tools.zip; else wget -q "https://dl.google.com/android/repository/sdk-tools-linux-4333796.zip" -O android-sdk-tools.zip; fi
#  - wget -q "https://dl.google.com/android/repository/sdk-tools-${OS}-4333796.zip" -O android-sdk-tools.zip
  - unzip -q android-sdk-tools.zip -d ${ANDROID_HOME}
  - rm android-sdk-tools.zip
  - PATH=${PATH}:${ANDROID_HOME}/tools:${ANDROID_HOME}/tools/bin:${ANDROID_HOME}/platform-tools
  # Silence warning.
  - mkdir -p ~/.android
  - touch ~/.android/repositories.cfg
  - HOMEBREW_NO_AUTO_UPDATE=1
  - if [ $TRAVIS_OS_NAME == "osx" ]; then brew cask uninstall java; brew tap caskroom/versions; brew cask install java8; fi
  # Accept licenses before installing components, no need to echo y for each component
  - yes | sdkmanager --licenses
  # Platform tools
  - sdkmanager "emulator" "tools" "platform-tools" > /dev/null
  - sdkmanager --list | head -15
  # install older packages (for emulator)
  - sdkmanager "build-tools;25.0.2" "platforms;android-25" > /dev/null
  # Create and start emulator.
  - sdkmanager "system-images;android-$SYS;$ABI" > /dev/null
  - sdkmanager --list | head -15
  - echo no | avdmanager create avd --force -n test -k "system-images;android-$SYS;$ABI"
  # fix timezone warning
  - if [ $TRAVIS_OS_NAME == "osx" ]; then sudo ln -sf /usr/share/zoneinfo/US/Pacific /etc/localtime; fi
  # use the absolute emulator path in case older version installed (on default path)
  - curl -sL https://deb.nodesource.com/setup_9.x | sudo -E bash -
  - $ANDROID_HOME/emulator/emulator -avd test -no-audio -no-window -gpu swiftshader &
  - sudo apt-get install nodejs
  - sudo apt-get install build-essential
  - PATH=$PATH:$JAVA_HOME/bin
  - npm install appium@1.8.1
  - "./node_modules/.bin/appium -a localhost -p 4800 --relaxed-securit --log-level info > appium_log.txt &"
before_script:
  # Wait for emulator to startup.
  - android-wait-for-emulator
  - adb shell input keyevent 82 
script:
  - mvn clean test -Dlang=en
after_script:
  - ls
  - cat ./appium_log.txt

#language: android
#sudo: required
#jdk: oraclejdk8
#android:
#    components:
#        - tools
#        - platform-tools
#        - build-tools-26.0.2
#        - android-26
#        - android-22
#        - android-24
#        - android-25
#        - addon-google_apis-google-25
#        - extra-google-google_play_services
#        - extra-google-m2repository
#        - extra-android-m2repository
#        - addon-google_apis-google-26
#        - sys-img-armeabi-v7a-android-22
#        - sys-img-armeabi-v7a-android-24
#        - sys-img-armeabi-v7a-android-25
#        - sys-img-armeabi-v7a-android-26
#        - sys-img-x86-android-26
#        - sys-img-armeabi-v7a-android-17
#
#cache:
#  directories:
#  - .autoconf
#  - $HOME/.m2
#  - _build
#  - deps
#
#before_install:
#    - cd craft-dish-automation
#    - ls
#    - mvn -N io.takari:maven:wrapper
#    - ./mvnw install -DskipTests=true -Dmaven.javadoc.skip=true -B -V
#    - sudo apt-get update
#    - sudo apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev
#      libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev
#
#  # - git clone https://github.com/pyenv/pyenv.git ~/.pyenv
#  # - echo 'export PYENV_ROOT="$HOME/.pyenv"' >> ~/.bash_profile
#  # - echo 'export PATH="$PYENV_ROOT/bin:$PATH"' >> ~/.bash_profile
#  # - echo 'eval "$(pyenv init -)"' >> ~/.bash_profile
#  # - git clone https://github.com/yyuu/pyenv-virtualenv.git ~/.pyenv/plugins/pyenv-virtualenv
#  # - echo 'eval "$(pyenv virtualenv-init -)"' >> ~/.bash_profile
#  # - source ~/.bash_profile
#  # - pyenv install 3.6.1
#  # - pyenv virtualenv 3.6.1 undang
#  # - pyenv activate undang
#  # - pip install -r requirements.txt
#
#    - curl -sL https://deb.nodesource.com/setup_9.x | sudo -E bash -
#    - chmod +x ./download_apk.sh
#    - ls
##    - curl -sL https://ci.appveyor.com/api/projects/ordeh/craft-dish/artifacts/Craft_dish/bin/Release/Craft_dish.Craft_dish-Signed.apk | sudo -E bash -
#    - ./download_apk.sh
#    - ls
#    - sudo apt-get install nodejs
#    - sudo apt-get install build-essential
#    - PATH=$PATH:$JAVA_HOME/bin
#    - npm install appium@1.8.1
#   # - npm install appium-doctor
#   # - "./node_modules/.bin/appium -a localhost -p 4800 --relaxed-security"
#   # - "./node_modules/.bin/appium-doctor"
#    - "./node_modules/.bin/appium -a localhost -p 4800 --relaxed-securit --log-level info > appium_log.txt &"
#before_script:
#    - echo no | android create avd --force -n test -t android-22 --abi armeabi-v7a -c 100M
#    - emulator -avd test -no-audio -no-window &
# #   - android-wait-for-emulator
#    - adb shell input keyevent 82 &
#   # - echo no | android create avd --force -n test -t android-22 --abi armeabi-v7a
#   # - emulator -avd test -no-skin -no-window &
#   # - android-wait-for-emulator
#   # - adb shell input keyevent 82 &
#script:
##    - "./gradlew assemble"
#    - mvn clean test -Dlang=en
#after_script:
#    - ls
#    - cat ./appium_log.txt
#
